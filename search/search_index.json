{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutoMTL pytorch friendly APIs for AutoMTL ( Github )","title":"Home"},{"location":"#automtl","text":"pytorch friendly APIs for AutoMTL ( Github )","title":"AutoMTL"},{"location":"#_1","text":"","title":""},{"location":"layer_node/","text":"Layer Node Conv2dNode layer_node.Conv2dNode(in_channels, out_channels, kernel_size, stride, padding, paddingmode, dilation, bias, groups, task_list) Conv2d embedded with task. argument arguments except task_list are the same as Conv2d task_list should be a list of tasks that you are interested in trainning BN2dNode layer_node.BN2dNode(num_features: int, eps: float, momentum: float, affine: bool, track_running_stats: bool, task_list: list) BN2d embedded with task argument arguments except task_list are the same as BatchNorm2d task_list should be a list of tasks that you are interested in trainning Sequential layer_node.Sequential(seq) A useful wrapper class for applying special forwarding in nn.Sequential Argument seq : should be nn.Sequential type of module","title":"Node"},{"location":"layer_node/#layer-node","text":"","title":"Layer Node"},{"location":"layer_node/#conv2dnode","text":"layer_node.Conv2dNode(in_channels, out_channels, kernel_size, stride, padding, paddingmode, dilation, bias, groups, task_list) Conv2d embedded with task.","title":"Conv2dNode"},{"location":"layer_node/#argument","text":"arguments except task_list are the same as Conv2d task_list should be a list of tasks that you are interested in trainning","title":"argument"},{"location":"layer_node/#bn2dnode","text":"layer_node.BN2dNode(num_features: int, eps: float, momentum: float, affine: bool, track_running_stats: bool, task_list: list) BN2d embedded with task","title":"BN2dNode"},{"location":"layer_node/#argument_1","text":"arguments except task_list are the same as BatchNorm2d task_list should be a list of tasks that you are interested in trainning","title":"argument"},{"location":"layer_node/#sequential","text":"layer_node.Sequential(seq) A useful wrapper class for applying special forwarding in nn.Sequential","title":"Sequential"},{"location":"layer_node/#argument_2","text":"seq : should be nn.Sequential type of module","title":"Argument"},{"location":"mobilenetv2/","text":"Mobilenetv2 A model that embedded with Multi-Task-Learning-training Implementation Replace every Conv2d and BN2d Layer in pytorch with layer_node.Conv2dNode , or layer_node.BN2dNode , with your interested task and wrap Sequential using layer_node.Sequential Inherited from mtl_model.mtl_model and call self.compute_depth() at the end of __init__() .","title":"mobilenetv2"},{"location":"mobilenetv2/#mobilenetv2","text":"A model that embedded with Multi-Task-Learning-training","title":"Mobilenetv2"},{"location":"mobilenetv2/#implementation","text":"Replace every Conv2d and BN2d Layer in pytorch with layer_node.Conv2dNode , or layer_node.BN2dNode , with your interested task and wrap Sequential using layer_node.Sequential Inherited from mtl_model.mtl_model and call self.compute_depth() at the end of __init__() .","title":"Implementation"},{"location":"mtl_model/","text":"MTL Model mtl_model mtl_model.mtl_model() Parent class for customized multi-task model. function compute_depth() should be called at the end of the __init__() for the child model class inherited from mtl_model . See example in mobilenetv2.py . policy_reg() will be called automatically when running alter_train_with_reg() in Trainer . Note: If choose to not inherit from mtl_model , please run alter_train() in Trainer at the second alter_train stage.","title":"Multi-Task Model (parent class)"},{"location":"mtl_model/#mtl-model","text":"","title":"MTL Model"},{"location":"mtl_model/#mtl_model","text":"mtl_model.mtl_model() Parent class for customized multi-task model.","title":"mtl_model"},{"location":"mtl_model/#function","text":"compute_depth() should be called at the end of the __init__() for the child model class inherited from mtl_model . See example in mobilenetv2.py . policy_reg() will be called automatically when running alter_train_with_reg() in Trainer . Note: If choose to not inherit from mtl_model , please run alter_train() in Trainer at the second alter_train stage.","title":"function"}]}